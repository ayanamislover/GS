Index: mysite/answerquestion/templates/answerquestion/results_page.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'answerquestion/base.html' %}\r\n\r\n{% block title %}Quiz Results{% endblock %}\r\n\r\n{% block content %}\r\n    <h1>Quiz Results for {{ nickname }}</h1> <!-- 显示用户昵称 -->\r\n    <p>You earned: {{ additional_score }} points!</p> <!-- 显示此次获得的分数 -->\r\n    <p>Your total score is now: {{ total_score }}</p> <!-- 显示更新后的总分数 -->\r\n    <!-- 假设 'index' 需要传递用户pk参数 -->\r\n    <a href=\"{% url 'index' nickname=nickname %}\">Back to series list</a>\r\n{% endblock %}\r\n\r\n\r\n
===================================================================
diff --git a/mysite/answerquestion/templates/answerquestion/results_page.html b/mysite/answerquestion/templates/answerquestion/results_page.html
--- a/mysite/answerquestion/templates/answerquestion/results_page.html	
+++ b/mysite/answerquestion/templates/answerquestion/results_page.html	
@@ -3,11 +3,14 @@
 {% block title %}Quiz Results{% endblock %}
 
 {% block content %}
+    
     <h1>Quiz Results for {{ nickname }}</h1> <!-- 显示用户昵称 -->
+    <p>Your series :{{series_id}}</p>
     <p>You earned: {{ additional_score }} points!</p> <!-- 显示此次获得的分数 -->
     <p>Your total score is now: {{ total_score }}</p> <!-- 显示更新后的总分数 -->
     <!-- 假设 'index' 需要传递用户pk参数 -->
-    <a href="{% url 'index' nickname=nickname %}">Back to series list</a>
+    <a href="{% url 'ans:index' nickname=nickname %}">Back to series list</a>
+    <a href="{% url 'quiz_leaderboard' nickname=nickname additional_score=additional_score series_id=series_id%}">check leaderboard</a>
 {% endblock %}
 
 
Index: mysite/mysite/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"mysite URL Configuration\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path,include\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\n\r\n\r\nurlpatterns = [\r\n    path(\"answerquestion/\", include(\"answerquestion.urls\")),\r\n    # 用户信息界面url，注意这里拼写需要和app名称一致\r\n    path(\"usersinformation/\", include((\"usersinformation.urls\", \"usersinformation\"), namespace=\"usersinformation\")),\r\n    # 成就系统界面url\r\n    path(\"achievement/\", include(\"achievement.urls\")),\r\n    path(\"web/\", include(\"web.urls\")),\r\n\r\n    path(\"leaderboard/\", include(\"leaderboard.urls\")),\r\n    path(\"admin/\", admin.site.urls),\r\n    path(\"myapp/\", include((\"myapp.urls\",\"myapp\"), namespace=\"myapp\")),\r\n]\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n
===================================================================
diff --git a/mysite/mysite/urls.py b/mysite/mysite/urls.py
--- a/mysite/mysite/urls.py	
+++ b/mysite/mysite/urls.py	
@@ -26,8 +26,9 @@
     # 成就系统界面url
     path("achievement/", include("achievement.urls")),
     path("web/", include("web.urls")),
-
+    path("navi/<str:nickname>/",include("navi.urls")),
     path("leaderboard/", include("leaderboard.urls")),
+    path("activityboard/",include("activityboard.urls")),
     path("admin/", admin.site.urls),
     path("myapp/", include(("myapp.urls","myapp"), namespace="myapp")),
 ]
Index: mysite/mysite/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for mysite project.\r\n\r\nGenerated by 'django-admin startproject' using Django 4.1.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\r\n\"\"\"\r\n\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = \"django-insecure-(%#odjc(+y*^i_sq43(^vem4x37f!8+-g_)g7b3g!8*!j*xw1o\"\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    \"leaderboard.apps.LeaderboardConfig\",\r\n    \"myapp.apps.MyappConfig\",\r\n    \"web.apps.WebConfig\",\r\n    \"answerquestion.apps.AnswerquestionConfig\",\r\n    \"achievement.apps.AchievementConfig\",\r\n    \"usersinformation.apps.UsersinformationConfig\",\r\n    \"django.contrib.admin\",\r\n    \"django.contrib.auth\",\r\n    \"django.contrib.contenttypes\",\r\n    \"django.contrib.sessions\",\r\n    \"django.contrib.messages\",\r\n    \"django.contrib.staticfiles\",\r\n]\r\n\r\nMIDDLEWARE = [\r\n    \"django.middleware.security.SecurityMiddleware\",\r\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\r\n    \"django.middleware.common.CommonMiddleware\",\r\n    \"django.middleware.csrf.CsrfViewMiddleware\",\r\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\r\n    \"django.contrib.messages.middleware.MessageMiddleware\",\r\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\r\n]\r\n\r\nROOT_URLCONF = \"mysite.urls\"\r\n\r\nTEMPLATES = [\r\n    {\r\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\r\n        \"DIRS\": [],\r\n        \"APP_DIRS\": True,\r\n        \"OPTIONS\": {\r\n            \"context_processors\": [\r\n                \"django.template.context_processors.debug\",\r\n                \"django.template.context_processors.request\",\r\n                \"django.contrib.auth.context_processors.auth\",\r\n                \"django.contrib.messages.context_processors.messages\",\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = \"mysite.wsgi.application\"\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    \"default\": {\r\n        \"ENGINE\": \"django.db.backends.sqlite3\",\r\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\r\n    },\r\n    {\"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",},\r\n    {\"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",},\r\n    {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",},\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = \"en-us\"\r\n\r\nTIME_ZONE = 'Europe/London' #设置为英国时区\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\r\n\r\nSTATIC_URL = \"static/\"\r\n\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\r\n\r\n# settings.py\r\nimport os\r\n\r\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 文件将存储在项目根目录下的media文件夹\r\nMEDIA_URL = '/media/'  # URL配置来访问media文件夹中的文件\r\n\r\n
===================================================================
diff --git a/mysite/mysite/settings.py b/mysite/mysite/settings.py
--- a/mysite/mysite/settings.py	
+++ b/mysite/mysite/settings.py	
@@ -31,6 +31,8 @@
 # Application definition
 
 INSTALLED_APPS = [
+    "activityboard.apps.ActivityboardConfig",
+    "navi.apps.NaviConfig",
     "leaderboard.apps.LeaderboardConfig",
     "myapp.apps.MyappConfig",
     "web.apps.WebConfig",
Index: .idea/GS.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"django\" name=\"Django\">\r\n      <configuration>\r\n        <option name=\"rootFolder\" value=\"$MODULE_DIR$/mysite\" />\r\n        <option name=\"settingsModule\" value=\"mysite/settings.py\" />\r\n        <option name=\"manageScript\" value=\"manage.py\" />\r\n        <option name=\"environment\" value=\"&lt;map/&gt;\" />\r\n        <option name=\"doNotUseTestRunner\" value=\"false\" />\r\n        <option name=\"trackFilePattern\" value=\"\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"D:\\Anaconda (2)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TemplatesService\">\r\n    <option name=\"TEMPLATE_CONFIGURATION\" value=\"Django\" />\r\n  </component>\r\n</module>
===================================================================
diff --git a/.idea/GS.iml b/.idea/GS.iml
--- a/.idea/GS.iml	
+++ b/.idea/GS.iml	
@@ -17,6 +17,10 @@
     <orderEntry type="jdk" jdkName="D:\Anaconda (2)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
   <component name="TemplatesService">
     <option name="TEMPLATE_CONFIGURATION" value="Django" />
   </component>
Index: mysite/answerquestion/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.http import JsonResponse\r\nfrom django.shortcuts import get_object_or_404, render,redirect,reverse\r\nfrom .models import Choice, UserAnswer, Question,Series\r\nfrom .forms import QuizForm\r\nfrom usersinformation.models import PlayerProfile\r\nfrom urllib.parse import urlencode\r\nfrom django.shortcuts import redirect\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.views.decorators.csrf import csrf_exempt\r\n\r\n\r\n#定义未有主键的未登录界面\r\ndef index_none(request):\r\n    # 使用render函数渲染响应，指定模板文件和上下文数据（如果有）\r\n    return render(request, 'usersinformation/player_profile_none.html')\r\n\r\n#答题主页面\r\ndef index(request, nickname):\r\n    series_list = Series.objects.all()\r\n    user_profile = get_object_or_404(PlayerProfile, nickname=nickname)\r\n\r\n    # 假设 PlayerProfile 有一个方法或属性来获取已完成的系列\r\n    completed_series_ids = user_profile.completed_series.values_list('id', flat=True)\r\n\r\n    # 为系列列表添加完成状态\r\n    series_with_status = []\r\n    for series in series_list:\r\n        series_with_status.append({\r\n            'series': series,\r\n            'is_completed': series.id in completed_series_ids,\r\n        })\r\n\r\n    return render(request, 'answerquestion/index.html', {\r\n        'series_with_status': series_with_status,\r\n        'user_nickname': user_profile.nickname,\r\n\r\n    })\r\n\r\n#本地\r\ndef series_detail(request, series_id, nickname):\r\n    series = get_object_or_404(Series, pk=series_id)\r\n    questions = series.questions.all()\r\n    player_profile = get_object_or_404(PlayerProfile, nickname=nickname)  # 根据传入的用户pk获取用户实例\r\n    # 获取用户昵称\r\n    user_nickname = player_profile.nickname  # 假设PlayerProfile模型有一个nickname字段\r\n\r\n    if request.method == 'POST':\r\n        form = QuizForm(request.POST, questions=questions)\r\n        if form.is_valid():\r\n            total_score = calculate_score(form.cleaned_data, questions)\r\n             #更新用户的PlayerProfile中的score\r\n            try:\r\n               player_profile = PlayerProfile.objects.get(nickname=nickname)\r\n               player_profile.score += total_score  # 增加得分\r\n               player_profile.save()\r\n            except PlayerProfile.DoesNotExist:\r\n            #处理用户没有PlayerProfile的情况\r\n             pass\r\n\r\n            # 构建带有查询字符串的URL\r\n            results_url = reverse('results_page', kwargs={'nickname': nickname}) + f'?score={total_score}'\r\n            return redirect(results_url)\r\n    else:\r\n        form = QuizForm(questions=questions)\r\n\r\n    return render(request, 'answerquestion/detail.html', {'form': form, 'series': series, 'user_nickname': user_nickname})\r\n\r\n\r\ndef results_page(request, nickname):\r\n    # 从查询字符串中获取得分\r\n    additional_score = int(request.GET.get('score', 0))\r\n    # 获取PlayerProfile实例\r\n    player_profile = get_object_or_404(PlayerProfile, nickname=nickname)\r\n    # 假设通过查询字符串传递系列的ID\r\n    series_id = request.GET.get('series_id')\r\n\r\n    series_completed = False  # 用于标记系列是否完成\r\n\r\n    if series_id:\r\n        series = get_object_or_404(Series, pk=series_id)\r\n        # 添加系列到completed_series，如果它还不在那里\r\n        if series not in player_profile.completed_series.all():\r\n            player_profile.completed_series.add(series)\r\n            series_completed = True  # 系列完成标记为True\r\n    # 准备传递给模板的上下文数据\r\n\r\n    context = {\r\n           'nickname': player_profile.nickname,\r\n          'total_score': player_profile.score,\r\n         'additional_score': additional_score,\r\n       'series_completed': series_completed,  # 标记系列是否完成\r\n\r\n     }\r\n    return render(request, 'answerquestion/results_page.html', context)\r\n\r\n\r\n\r\n\r\n#梓涵\r\ndef series_detail1(request, series_id, nickname):\r\n    series = get_object_or_404(Series, pk=series_id)\r\n    questions = series.questions.all()\r\n    player_profile = get_object_or_404(PlayerProfile, nickname=nickname)  # 根据传入的用户pk获取用户实例\r\n    # 获取用户昵称\r\n    user_nickname = player_profile.nickname  # 假设PlayerProfile模型有一个nickname字段\r\n\r\n    if request.method == 'POST':\r\n        form = QuizForm(request.POST, questions=questions)\r\n        if form.is_valid():\r\n            total_score = calculate_score(form.cleaned_data, questions)\r\n             #更新用户的PlayerProfile中的score\r\n            try:\r\n               player_profile = PlayerProfile.objects.get(nickname=nickname)\r\n               player_profile.score += total_score  # 增加得分\r\n               player_profile.save()\r\n            except PlayerProfile.DoesNotExist:\r\n            #处理用户没有PlayerProfile的情况\r\n             pass\r\n\r\n            # 构建带有查询字符串的URL\r\n            results_url = reverse('results_page', kwargs={'nickname': nickname}) + f'?score={total_score}'\r\n            return redirect(results_url)\r\n    else:\r\n        form = QuizForm(questions=questions)\r\n\r\n    return render(request, 'answerquestion/detail.html', {'form': form, 'series': series, 'user_nickname': user_nickname})\r\n\r\n#梓涵\r\ndef results_page1(request, nickname):\r\n    # 从查询字符串中获取得分\r\n    additional_score = int(request.GET.get('score', 0))\r\n    # 获取PlayerProfile实例\r\n    player_profile = get_object_or_404(PlayerProfile, nickname=nickname)\r\n    # 假设通过查询字符串传递系列的ID\r\n    series_id = request.GET.get('series_id')\r\n\r\n    series_completed = False  # 用于标记系列是否完成\r\n\r\n    if series_id:\r\n        series = get_object_or_404(Series, pk=series_id)\r\n        # 添加系列到completed_series，如果它还不在那里\r\n        if series not in player_profile.completed_series.all():\r\n            player_profile.completed_series.add(series)\r\n            series_completed = True  # 系列完成标记为True\r\n\r\n\r\n    # 创建查询字典\r\n    query_dict = {\r\n        'nickname': player_profile.nickname,\r\n        'additional_score':additional_score,\r\n        'series_id': series_id,  # 添加series_id到字典中\r\n    }\r\n\r\n    # 将查询字典转换为查询字符串\r\n    query_string = urlencode(query_dict)\r\n\r\n    # 生成重定向URL，附加查询字符串\r\n    return_url = reverse('你的视图函数名字', args=[player_profile.nickname]) + '?' + query_string\r\n\r\n    # 重定向到目标URL\r\n    return redirect(return_url)\r\n\r\n    # 准备传递给模板的上下文数据\r\n#    context = {\r\n #       'nickname': player_profile.nickname,\r\n  #      'total_score': player_profile.score,\r\n   #     'additional_score': additional_score,\r\n    #    'pk': pk,\r\n     #   'series_completed': series_completed,  # 标记系列是否完成\r\n        #'return_url': return_url  # 返回到其他模块的URL\r\n    #}\r\n    #return render(request, 'answerquestion/results_page.html', context)\r\n\r\ndef calculate_score(cleaned_data, questions):\r\n    # 根据cleaned_data和正确的答案计算总分\r\n    total_score = 0\r\n    for question in questions:\r\n        correct_answer = question.choices.get(is_correct=True).id\r\n        given_answer = int(cleaned_data.get('question_%s' % question.id))\r\n        if correct_answer == given_answer:\r\n            total_score += 1  # 假设每个问题1分\r\n    return total_score\r\n\r\n\r\n#@csrf_exempt  # 如果你不处理CSRF令牌，可以暂时禁用CSRF保护\r\ndef submit_answers(request):\r\n    if request.method == 'POST':\r\n        total_score = 0\r\n        correct_answers = 0\r\n        # 假设每个问题的得分是1分\r\n        score_per_question = 1\r\n        user_answers = request.POST\r\n        for key, value in user_answers.items():\r\n            if key.startswith('question_'):\r\n                question_id = key.split('_')[1]\r\n                selected_choice = value\r\n                correct_choice = Choice.objects.filter(question_id=question_id, is_correct=True).first()\r\n\r\n                if correct_choice and str(correct_choice.id) == selected_choice:\r\n                    total_score += score_per_question\r\n                    correct_answers += 1\r\n\r\n        # 保存结果到session或数据库（根据需要）\r\n        # 例如: request.session['total_score'] = total_score\r\n\r\n        # 重定向到结果页面\r\n        return redirect('results_page', total_score=total_score, correct_answers=correct_answers)\r\n    else:\r\n        # 如果不是POST请求，则重定向回首页或其他页面\r\n        return redirect('index')\r\n\r\n#lcy\r\ndef series_detail2(request, series_id, nickname):\r\n        series2 = get_object_or_404(Series, pk=series_id)\r\n        questions2 = series2.questions.all()\r\n        player_profile2 = get_object_or_404(PlayerProfile, nickname=nickname)  # 根据传入的用户pk获取用户实例\r\n        # 获取用户昵称\r\n        user_nickname2 = player_profile2.nickname  # 假设PlayerProfile模型有一个nickname字段\r\n\r\n        if request.method == 'POST':\r\n            form = QuizForm(request.POST, questions=questions2)\r\n            if form.is_valid():\r\n                total_score = calculate_score(form.cleaned_data, questions2)\r\n                # 更新用户的PlayerProfile中的score\r\n                try:\r\n                    player_profile2 = PlayerProfile.objects.get(nickname=nickname)\r\n                    player_profile2.score += total_score  # 增加得分\r\n                    player_profile2.save()\r\n                except PlayerProfile.DoesNotExist:\r\n                    # 处理用户没有PlayerProfile的情况\r\n                    pass\r\n\r\n                # 构建带有查询字符串的URL\r\n                results_url = reverse('results_page2', kwargs={'nickname': nickname}) + f'?score={total_score}'\r\n                return redirect(results_url)\r\n        else:\r\n            form = QuizForm(questions=questions2)\r\n\r\n        return render(request, 'answerquestion/detail.html',\r\n                      {'form': form, 'series': series2, 'user_nickname': user_nickname2})\r\n\r\n#lcy\r\ndef results_page2(request, nickname):\r\n        # 从查询字符串中获取得分\r\n        additional_score = int(request.GET.get('score', 0))\r\n        # 获取PlayerProfile实例\r\n        player_profile = get_object_or_404(PlayerProfile, nickname=nickname)\r\n        # 假设通过查询字符串传递系列的ID\r\n        series_id = request.GET.get('series_id')\r\n\r\n        series_completed = False  # 用于标记系列是否完成\r\n\r\n        if series_id:\r\n            series = get_object_or_404(Series, pk=series_id)\r\n            # 添加系列到completed_series，如果它还不在那里\r\n            if series not in player_profile.completed_series.all():\r\n                player_profile.completed_series.add(series)\r\n                series_completed = True  # 系列完成标记为True\r\n\r\n        # 创建查询字典\r\n        query_dict = {\r\n            #'nickname': player_profile.nickname,\r\n            'additional_score': additional_score,\r\n            #'series_id': series_id,  # 添加series_id到字典中\r\n        }\r\n\r\n        # 将查询字典转换为查询字符串\r\n        query_string = urlencode(query_dict)\r\n\r\n        # 生成重定向URL，附加查询字符串\r\n        return_url = reverse('你的视图函数名字', args=[player_profile.nickname]) + '?' + query_string\r\n\r\n        # 重定向到目标URL\r\n        return redirect(return_url)
===================================================================
diff --git a/mysite/answerquestion/views.py b/mysite/answerquestion/views.py
--- a/mysite/answerquestion/views.py	
+++ b/mysite/answerquestion/views.py	
@@ -58,7 +58,7 @@
              pass
 
             # 构建带有查询字符串的URL
-            results_url = reverse('results_page', kwargs={'nickname': nickname}) + f'?score={total_score}'
+            results_url = reverse('results_page', kwargs={'nickname': nickname,'series_id': series_id}) + f'?score={total_score}'
             return redirect(results_url)
     else:
         form = QuizForm(questions=questions)
@@ -72,7 +72,7 @@
     # 获取PlayerProfile实例
     player_profile = get_object_or_404(PlayerProfile, nickname=nickname)
     # 假设通过查询字符串传递系列的ID
-    series_id = request.GET.get('series_id')
+    #series_id = request.GET.get('series_id')
 
     series_completed = False  # 用于标记系列是否完成
 
